// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  username          String   @unique
  email             String   @unique
  password          String?
  githubId          String?  // For GitHub OAuth
  profilePictureUrl String?  // Use Gravatar or GitHub
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  followers         FollowRequest[] @relation("UserFollowers")
  following         FollowRequest[] @relation("UserFollowing")
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  likes     Like[]
  comments  Comment[]
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Like {
  id      Int  @id @default(autoincrement())
  userId  Int
  postId  Int
  user    User @relation(fields: [userId], references: [id])
  post    Post @relation(fields: [postId], references: [id])
}

model FollowRequest {
  id        Int      @id @default(autoincrement())
  followerId Int
  followingId Int
  status    String   // pending, accepted
  follower  User     @relation("UserFollowers", fields: [followerId], references: [id])
  following User     @relation("UserFollowing", fields: [followingId], references: [id])
}
